# toolbox/vulnerability_detection.py

import subprocess

def check_vulnerabilities(target):
    # Example implementation of check_vulnerabilities
    return {"result": f"Checked vulnerabilities for {target}"}

def nmap_vuln_scan(target):
    command = ["nmap", "-sV", "--script=vuln", target]
    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode != 0:
        return {"error": result.stderr}
    return {"result": result.stdout}

def http_headers_analysis(url):
    command = ["curl", "-I", url]
    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode != 0:
        return {"error": result.stderr}
    return {"result": result.stdout}

def nikto_scan(url):
    print(f"Starting Nikto scan on {url}...")
    
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url

    try:
        command = [
            "nikto",
            "-h", url,
            "-Tuning", "x",
            "-port", "80,443",
            "-timeout", "60",
            "-useragent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
            "-output", "nikto_scan_output.txt"
        ]

        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"Nikto scan failed: {result.stderr}")
            return {"error": result.stderr}
        
        print("Nikto scan completed successfully.")
        with open("nikto_scan_output.txt", "r") as file:
            scan_results = file.read()
        
        return {"result": scan_results}
    except Exception as e:
        print(f"An error occurred while running Nikto scan: {e}")
        return {"error": str(e)}

def scan_specific_vulnerabilities(target):
    # Placeholder for specific vulnerabilities scan
    pass
